# CI/CD GitHub Actions workflow for Node.js app using Docker

name: Docker-based CI/CD Pipeline

on:
  push:
    branches:
      - main  # Only trigger on main branch pushes

jobs:
  ci-test:
    name: Continuous Integration - Build & Test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repo
      - name: Checkout source code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to Docker Hub
      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 4: Build image tagged as :test and push to Docker Hub
      - name: Build and push image (test tag)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jest-testing:test

      # Step 5: Run tests inside Docker container
      - name: Run tests in Docker container
        run: docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/jest-testing:test npm test

  cd-deploy:
    name: Continuous Deployment - Tag & Push :latest
    runs-on: ubuntu-latest
    needs: ci-test  # Only run if tests passed

    steps:
      # Step 1: Docker Hub Login again
      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 2: Pull :test image and tag it as :latest
      - name: Pull :test image and re-tag
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/jest-testing:test
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/jest-testing:test ${{ secrets.DOCKERHUB_USERNAME }}/jest-testing:latest

      # Step 3: Push :latest image
      - name: Push :latest image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/jest-testing:latest
      
        # Step 4: Clean up local Docker images
      - name: Clean up local Docker images
        run: docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/jest-testing:test ${{ secrets.DOCKERHUB_USERNAME }}/jest-testing:latest || true 
        # The || true ensures the step doesn't fail if the images don't exist
      
        # Step 5: Clean up dangling images
      - name: Clean up dangling images
        run: docker image prune -f
        # This removes any dangling images that are not tagged and not referenced by any containers   
      
        # Step 6: Clean up unused volumes
      - name: Clean up unused volumes 
        run: docker volume prune -f
        # This removes any unused volumes that are not referenced by any containers 
      
        # Step 7: Clean up unused networks
      - name: Clean up unused networks  
        run: docker network prune -f
        # This removes any unused networks that are not referenced by any containers